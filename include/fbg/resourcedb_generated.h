// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESOURCEDB_RESOURCEDB_H_
#define FLATBUFFERS_GENERATED_RESOURCEDB_RESOURCEDB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace ResourceDB {

struct Font;
struct FontBuilder;

struct Sound;
struct SoundBuilder;

struct Texture;
struct TextureBuilder;

struct Animation;
struct AnimationBuilder;

struct Spritesheet;
struct SpritesheetBuilder;

struct MaterialProto;
struct MaterialProtoBuilder;

struct CardProto;
struct CardProtoBuilder;

struct Root;
struct RootBuilder;

enum MaterialAttribs : uint32_t {
  MaterialAttribs_Flammable = 1,
  MaterialAttribs_NONE = 0,
  MaterialAttribs_ANY = 1
};

inline const MaterialAttribs (&EnumValuesMaterialAttribs())[1] {
  static const MaterialAttribs values[] = {
    MaterialAttribs_Flammable
  };
  return values;
}

inline const char * const *EnumNamesMaterialAttribs() {
  static const char * const names[2] = {
    "Flammable",
    nullptr
  };
  return names;
}

inline const char *EnumNameMaterialAttribs(MaterialAttribs e) {
  if (flatbuffers::IsOutRange(e, MaterialAttribs_Flammable, MaterialAttribs_Flammable)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(MaterialAttribs_Flammable);
  return EnumNamesMaterialAttribs()[index];
}

enum EffectTypes : uint32_t {
  EffectTypes_IgniteFlammable = 1,
  EffectTypes_ExtinguishFlammable = 2,
  EffectTypes_NONE = 0,
  EffectTypes_ANY = 3
};

inline const EffectTypes (&EnumValuesEffectTypes())[2] {
  static const EffectTypes values[] = {
    EffectTypes_IgniteFlammable,
    EffectTypes_ExtinguishFlammable
  };
  return values;
}

inline const char * const *EnumNamesEffectTypes() {
  static const char * const names[3] = {
    "IgniteFlammable",
    "ExtinguishFlammable",
    nullptr
  };
  return names;
}

inline const char *EnumNameEffectTypes(EffectTypes e) {
  if (flatbuffers::IsOutRange(e, EffectTypes_IgniteFlammable, EffectTypes_ExtinguishFlammable)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(EffectTypes_IgniteFlammable);
  return EnumNamesEffectTypes()[index];
}

struct Font FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FontBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ResourceDB.Font";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TTF_PATH = 6,
    VT_POINT_SIZE = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Font *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  const flatbuffers::String *ttf_path() const {
    return GetPointer<const flatbuffers::String *>(VT_TTF_PATH);
  }
  int32_t point_size() const {
    return GetField<int32_t>(VT_POINT_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TTF_PATH) &&
           verifier.VerifyString(ttf_path()) &&
           VerifyField<int32_t>(verifier, VT_POINT_SIZE, 4) &&
           verifier.EndTable();
  }
};

struct FontBuilder {
  typedef Font Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Font::VT_NAME, name);
  }
  void add_ttf_path(flatbuffers::Offset<flatbuffers::String> ttf_path) {
    fbb_.AddOffset(Font::VT_TTF_PATH, ttf_path);
  }
  void add_point_size(int32_t point_size) {
    fbb_.AddElement<int32_t>(Font::VT_POINT_SIZE, point_size, 0);
  }
  explicit FontBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Font> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Font>(end);
    fbb_.Required(o, Font::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Font> CreateFont(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> ttf_path = 0,
    int32_t point_size = 0) {
  FontBuilder builder_(_fbb);
  builder_.add_point_size(point_size);
  builder_.add_ttf_path(ttf_path);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Font> CreateFontDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *ttf_path = nullptr,
    int32_t point_size = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ttf_path__ = ttf_path ? _fbb.CreateString(ttf_path) : 0;
  return ResourceDB::CreateFont(
      _fbb,
      name__,
      ttf_path__,
      point_size);
}

struct Sound FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SoundBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ResourceDB.Sound";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PATH = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Sound *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct SoundBuilder {
  typedef Sound Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Sound::VT_NAME, name);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(Sound::VT_PATH, path);
  }
  explicit SoundBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Sound> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Sound>(end);
    fbb_.Required(o, Sound::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Sound> CreateSound(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  SoundBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Sound> CreateSoundDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *path = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return ResourceDB::CreateSound(
      _fbb,
      name__,
      path__);
}

struct Texture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TextureBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ResourceDB.Texture";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PATH = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Texture *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct TextureBuilder {
  typedef Texture Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Texture::VT_NAME, name);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(Texture::VT_PATH, path);
  }
  explicit TextureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Texture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Texture>(end);
    fbb_.Required(o, Texture::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Texture> CreateTexture(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Texture> CreateTextureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *path = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return ResourceDB::CreateTexture(
      _fbb,
      name__,
      path__);
}

struct Animation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnimationBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ResourceDB.Animation";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DESC = 6,
    VT_FRAME_START = 8,
    VT_FRAME_COUNT = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Animation *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  const flatbuffers::String *desc() const {
    return GetPointer<const flatbuffers::String *>(VT_DESC);
  }
  int32_t frame_start() const {
    return GetField<int32_t>(VT_FRAME_START, 0);
  }
  int32_t frame_count() const {
    return GetField<int32_t>(VT_FRAME_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(desc()) &&
           VerifyField<int32_t>(verifier, VT_FRAME_START, 4) &&
           VerifyField<int32_t>(verifier, VT_FRAME_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct AnimationBuilder {
  typedef Animation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Animation::VT_NAME, name);
  }
  void add_desc(flatbuffers::Offset<flatbuffers::String> desc) {
    fbb_.AddOffset(Animation::VT_DESC, desc);
  }
  void add_frame_start(int32_t frame_start) {
    fbb_.AddElement<int32_t>(Animation::VT_FRAME_START, frame_start, 0);
  }
  void add_frame_count(int32_t frame_count) {
    fbb_.AddElement<int32_t>(Animation::VT_FRAME_COUNT, frame_count, 0);
  }
  explicit AnimationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Animation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Animation>(end);
    fbb_.Required(o, Animation::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Animation> CreateAnimation(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> desc = 0,
    int32_t frame_start = 0,
    int32_t frame_count = 0) {
  AnimationBuilder builder_(_fbb);
  builder_.add_frame_count(frame_count);
  builder_.add_frame_start(frame_start);
  builder_.add_desc(desc);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Animation> CreateAnimationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *desc = nullptr,
    int32_t frame_start = 0,
    int32_t frame_count = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto desc__ = desc ? _fbb.CreateString(desc) : 0;
  return ResourceDB::CreateAnimation(
      _fbb,
      name__,
      desc__,
      frame_start,
      frame_count);
}

struct Spritesheet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SpritesheetBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ResourceDB.Spritesheet";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TEXTURE_KEY = 6,
    VT_CELL_COUNT = 8,
    VT_CELL_WIDTH = 10,
    VT_CELL_HEIGHT = 12,
    VT_ANIMATIONS = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Spritesheet *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  const flatbuffers::String *texture_key() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXTURE_KEY);
  }
  int32_t cell_count() const {
    return GetField<int32_t>(VT_CELL_COUNT, 0);
  }
  int32_t cell_width() const {
    return GetField<int32_t>(VT_CELL_WIDTH, 0);
  }
  int32_t cell_height() const {
    return GetField<int32_t>(VT_CELL_HEIGHT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Animation>> *animations() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Animation>> *>(VT_ANIMATIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TEXTURE_KEY) &&
           verifier.VerifyString(texture_key()) &&
           VerifyField<int32_t>(verifier, VT_CELL_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_CELL_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_CELL_HEIGHT, 4) &&
           VerifyOffset(verifier, VT_ANIMATIONS) &&
           verifier.VerifyVector(animations()) &&
           verifier.VerifyVectorOfTables(animations()) &&
           verifier.EndTable();
  }
};

struct SpritesheetBuilder {
  typedef Spritesheet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Spritesheet::VT_NAME, name);
  }
  void add_texture_key(flatbuffers::Offset<flatbuffers::String> texture_key) {
    fbb_.AddOffset(Spritesheet::VT_TEXTURE_KEY, texture_key);
  }
  void add_cell_count(int32_t cell_count) {
    fbb_.AddElement<int32_t>(Spritesheet::VT_CELL_COUNT, cell_count, 0);
  }
  void add_cell_width(int32_t cell_width) {
    fbb_.AddElement<int32_t>(Spritesheet::VT_CELL_WIDTH, cell_width, 0);
  }
  void add_cell_height(int32_t cell_height) {
    fbb_.AddElement<int32_t>(Spritesheet::VT_CELL_HEIGHT, cell_height, 0);
  }
  void add_animations(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Animation>>> animations) {
    fbb_.AddOffset(Spritesheet::VT_ANIMATIONS, animations);
  }
  explicit SpritesheetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Spritesheet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Spritesheet>(end);
    fbb_.Required(o, Spritesheet::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Spritesheet> CreateSpritesheet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> texture_key = 0,
    int32_t cell_count = 0,
    int32_t cell_width = 0,
    int32_t cell_height = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Animation>>> animations = 0) {
  SpritesheetBuilder builder_(_fbb);
  builder_.add_animations(animations);
  builder_.add_cell_height(cell_height);
  builder_.add_cell_width(cell_width);
  builder_.add_cell_count(cell_count);
  builder_.add_texture_key(texture_key);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Spritesheet> CreateSpritesheetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *texture_key = nullptr,
    int32_t cell_count = 0,
    int32_t cell_width = 0,
    int32_t cell_height = 0,
    std::vector<flatbuffers::Offset<ResourceDB::Animation>> *animations = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto texture_key__ = texture_key ? _fbb.CreateString(texture_key) : 0;
  auto animations__ = animations ? _fbb.CreateVectorOfSortedTables<ResourceDB::Animation>(animations) : 0;
  return ResourceDB::CreateSpritesheet(
      _fbb,
      name__,
      texture_key__,
      cell_count,
      cell_width,
      cell_height,
      animations__);
}

struct MaterialProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MaterialProtoBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ResourceDB.MaterialProto";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ATTRIBS = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const MaterialProto *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  ResourceDB::MaterialAttribs attribs() const {
    return static_cast<ResourceDB::MaterialAttribs>(GetField<uint32_t>(VT_ATTRIBS, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_ATTRIBS, 4) &&
           verifier.EndTable();
  }
};

struct MaterialProtoBuilder {
  typedef MaterialProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MaterialProto::VT_NAME, name);
  }
  void add_attribs(ResourceDB::MaterialAttribs attribs) {
    fbb_.AddElement<uint32_t>(MaterialProto::VT_ATTRIBS, static_cast<uint32_t>(attribs), 0);
  }
  explicit MaterialProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MaterialProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MaterialProto>(end);
    fbb_.Required(o, MaterialProto::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<MaterialProto> CreateMaterialProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    ResourceDB::MaterialAttribs attribs = static_cast<ResourceDB::MaterialAttribs>(0)) {
  MaterialProtoBuilder builder_(_fbb);
  builder_.add_attribs(attribs);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<MaterialProto> CreateMaterialProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ResourceDB::MaterialAttribs attribs = static_cast<ResourceDB::MaterialAttribs>(0)) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ResourceDB::CreateMaterialProto(
      _fbb,
      name__,
      attribs);
}

struct CardProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CardProtoBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ResourceDB.CardProto";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SPRITESHEET = 6,
    VT_DEFAULT_ANIMATION = 8,
    VT_MATERIAL_PROTO = 10,
    VT_EFFECTS = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const CardProto *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  const flatbuffers::String *spritesheet() const {
    return GetPointer<const flatbuffers::String *>(VT_SPRITESHEET);
  }
  const flatbuffers::String *default_animation() const {
    return GetPointer<const flatbuffers::String *>(VT_DEFAULT_ANIMATION);
  }
  const flatbuffers::String *material_proto() const {
    return GetPointer<const flatbuffers::String *>(VT_MATERIAL_PROTO);
  }
  ResourceDB::EffectTypes effects() const {
    return static_cast<ResourceDB::EffectTypes>(GetField<uint32_t>(VT_EFFECTS, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SPRITESHEET) &&
           verifier.VerifyString(spritesheet()) &&
           VerifyOffset(verifier, VT_DEFAULT_ANIMATION) &&
           verifier.VerifyString(default_animation()) &&
           VerifyOffset(verifier, VT_MATERIAL_PROTO) &&
           verifier.VerifyString(material_proto()) &&
           VerifyField<uint32_t>(verifier, VT_EFFECTS, 4) &&
           verifier.EndTable();
  }
};

struct CardProtoBuilder {
  typedef CardProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CardProto::VT_NAME, name);
  }
  void add_spritesheet(flatbuffers::Offset<flatbuffers::String> spritesheet) {
    fbb_.AddOffset(CardProto::VT_SPRITESHEET, spritesheet);
  }
  void add_default_animation(flatbuffers::Offset<flatbuffers::String> default_animation) {
    fbb_.AddOffset(CardProto::VT_DEFAULT_ANIMATION, default_animation);
  }
  void add_material_proto(flatbuffers::Offset<flatbuffers::String> material_proto) {
    fbb_.AddOffset(CardProto::VT_MATERIAL_PROTO, material_proto);
  }
  void add_effects(ResourceDB::EffectTypes effects) {
    fbb_.AddElement<uint32_t>(CardProto::VT_EFFECTS, static_cast<uint32_t>(effects), 0);
  }
  explicit CardProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CardProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CardProto>(end);
    fbb_.Required(o, CardProto::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<CardProto> CreateCardProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> spritesheet = 0,
    flatbuffers::Offset<flatbuffers::String> default_animation = 0,
    flatbuffers::Offset<flatbuffers::String> material_proto = 0,
    ResourceDB::EffectTypes effects = static_cast<ResourceDB::EffectTypes>(0)) {
  CardProtoBuilder builder_(_fbb);
  builder_.add_effects(effects);
  builder_.add_material_proto(material_proto);
  builder_.add_default_animation(default_animation);
  builder_.add_spritesheet(spritesheet);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<CardProto> CreateCardProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *spritesheet = nullptr,
    const char *default_animation = nullptr,
    const char *material_proto = nullptr,
    ResourceDB::EffectTypes effects = static_cast<ResourceDB::EffectTypes>(0)) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto spritesheet__ = spritesheet ? _fbb.CreateString(spritesheet) : 0;
  auto default_animation__ = default_animation ? _fbb.CreateString(default_animation) : 0;
  auto material_proto__ = material_proto ? _fbb.CreateString(material_proto) : 0;
  return ResourceDB::CreateCardProto(
      _fbb,
      name__,
      spritesheet__,
      default_animation__,
      material_proto__,
      effects);
}

struct Root FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RootBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ResourceDB.Root";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_CARD_PROTOS = 6,
    VT_FONTS = 8,
    VT_MATERIAL_PROTOS = 10,
    VT_SPRITESHEETS = 12,
    VT_SOUNDS = 14,
    VT_TEXTURES = 16
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::CardProto>> *card_protos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::CardProto>> *>(VT_CARD_PROTOS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Font>> *fonts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Font>> *>(VT_FONTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::MaterialProto>> *material_protos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::MaterialProto>> *>(VT_MATERIAL_PROTOS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Spritesheet>> *spritesheets() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Spritesheet>> *>(VT_SPRITESHEETS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Sound>> *sounds() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Sound>> *>(VT_SOUNDS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Texture>> *textures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Texture>> *>(VT_TEXTURES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CARD_PROTOS) &&
           verifier.VerifyVector(card_protos()) &&
           verifier.VerifyVectorOfTables(card_protos()) &&
           VerifyOffset(verifier, VT_FONTS) &&
           verifier.VerifyVector(fonts()) &&
           verifier.VerifyVectorOfTables(fonts()) &&
           VerifyOffset(verifier, VT_MATERIAL_PROTOS) &&
           verifier.VerifyVector(material_protos()) &&
           verifier.VerifyVectorOfTables(material_protos()) &&
           VerifyOffset(verifier, VT_SPRITESHEETS) &&
           verifier.VerifyVector(spritesheets()) &&
           verifier.VerifyVectorOfTables(spritesheets()) &&
           VerifyOffset(verifier, VT_SOUNDS) &&
           verifier.VerifyVector(sounds()) &&
           verifier.VerifyVectorOfTables(sounds()) &&
           VerifyOffset(verifier, VT_TEXTURES) &&
           verifier.VerifyVector(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           verifier.EndTable();
  }
};

struct RootBuilder {
  typedef Root Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Root::VT_NAME, name);
  }
  void add_card_protos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::CardProto>>> card_protos) {
    fbb_.AddOffset(Root::VT_CARD_PROTOS, card_protos);
  }
  void add_fonts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Font>>> fonts) {
    fbb_.AddOffset(Root::VT_FONTS, fonts);
  }
  void add_material_protos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::MaterialProto>>> material_protos) {
    fbb_.AddOffset(Root::VT_MATERIAL_PROTOS, material_protos);
  }
  void add_spritesheets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Spritesheet>>> spritesheets) {
    fbb_.AddOffset(Root::VT_SPRITESHEETS, spritesheets);
  }
  void add_sounds(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Sound>>> sounds) {
    fbb_.AddOffset(Root::VT_SOUNDS, sounds);
  }
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Texture>>> textures) {
    fbb_.AddOffset(Root::VT_TEXTURES, textures);
  }
  explicit RootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Root> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Root>(end);
    return o;
  }
};

inline flatbuffers::Offset<Root> CreateRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::CardProto>>> card_protos = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Font>>> fonts = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::MaterialProto>>> material_protos = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Spritesheet>>> spritesheets = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Sound>>> sounds = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceDB::Texture>>> textures = 0) {
  RootBuilder builder_(_fbb);
  builder_.add_textures(textures);
  builder_.add_sounds(sounds);
  builder_.add_spritesheets(spritesheets);
  builder_.add_material_protos(material_protos);
  builder_.add_fonts(fonts);
  builder_.add_card_protos(card_protos);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Root> CreateRootDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    std::vector<flatbuffers::Offset<ResourceDB::CardProto>> *card_protos = nullptr,
    std::vector<flatbuffers::Offset<ResourceDB::Font>> *fonts = nullptr,
    std::vector<flatbuffers::Offset<ResourceDB::MaterialProto>> *material_protos = nullptr,
    std::vector<flatbuffers::Offset<ResourceDB::Spritesheet>> *spritesheets = nullptr,
    std::vector<flatbuffers::Offset<ResourceDB::Sound>> *sounds = nullptr,
    std::vector<flatbuffers::Offset<ResourceDB::Texture>> *textures = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto card_protos__ = card_protos ? _fbb.CreateVectorOfSortedTables<ResourceDB::CardProto>(card_protos) : 0;
  auto fonts__ = fonts ? _fbb.CreateVectorOfSortedTables<ResourceDB::Font>(fonts) : 0;
  auto material_protos__ = material_protos ? _fbb.CreateVectorOfSortedTables<ResourceDB::MaterialProto>(material_protos) : 0;
  auto spritesheets__ = spritesheets ? _fbb.CreateVectorOfSortedTables<ResourceDB::Spritesheet>(spritesheets) : 0;
  auto sounds__ = sounds ? _fbb.CreateVectorOfSortedTables<ResourceDB::Sound>(sounds) : 0;
  auto textures__ = textures ? _fbb.CreateVectorOfSortedTables<ResourceDB::Texture>(textures) : 0;
  return ResourceDB::CreateRoot(
      _fbb,
      name__,
      card_protos__,
      fonts__,
      material_protos__,
      spritesheets__,
      sounds__,
      textures__);
}

inline const ResourceDB::Root *GetRoot(const void *buf) {
  return flatbuffers::GetRoot<ResourceDB::Root>(buf);
}

inline const ResourceDB::Root *GetSizePrefixedRoot(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ResourceDB::Root>(buf);
}

inline const char *RootIdentifier() {
  return "15dy";
}

inline bool RootBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RootIdentifier());
}

inline bool SizePrefixedRootBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RootIdentifier(), true);
}

inline bool VerifyRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ResourceDB::Root>(RootIdentifier());
}

inline bool VerifySizePrefixedRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ResourceDB::Root>(RootIdentifier());
}

inline const char *RootExtension() {
  return "fbb";
}

inline void FinishRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ResourceDB::Root> root) {
  fbb.Finish(root, RootIdentifier());
}

inline void FinishSizePrefixedRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ResourceDB::Root> root) {
  fbb.FinishSizePrefixed(root, RootIdentifier());
}

}  // namespace ResourceDB

#endif  // FLATBUFFERS_GENERATED_RESOURCEDB_RESOURCEDB_H_
