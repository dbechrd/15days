// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESOURCEDB_DB_H_
#define FLATBUFFERS_GENERATED_RESOURCEDB_DB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace DB {

struct Animation;
struct AnimationBuilder;

struct Spritesheet;
struct SpritesheetBuilder;

struct ResourceDB;
struct ResourceDBBuilder;

struct Animation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnimationBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.Animation";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_FRAME_START = 6,
    VT_FRAME_COUNT = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Animation *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  int32_t frame_start() const {
    return GetField<int32_t>(VT_FRAME_START, 0);
  }
  int32_t frame_count() const {
    return GetField<int32_t>(VT_FRAME_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_FRAME_START, 4) &&
           VerifyField<int32_t>(verifier, VT_FRAME_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct AnimationBuilder {
  typedef Animation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Animation::VT_NAME, name);
  }
  void add_frame_start(int32_t frame_start) {
    fbb_.AddElement<int32_t>(Animation::VT_FRAME_START, frame_start, 0);
  }
  void add_frame_count(int32_t frame_count) {
    fbb_.AddElement<int32_t>(Animation::VT_FRAME_COUNT, frame_count, 0);
  }
  explicit AnimationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Animation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Animation>(end);
    fbb_.Required(o, Animation::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Animation> CreateAnimation(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t frame_start = 0,
    int32_t frame_count = 0) {
  AnimationBuilder builder_(_fbb);
  builder_.add_frame_count(frame_count);
  builder_.add_frame_start(frame_start);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Animation> CreateAnimationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t frame_start = 0,
    int32_t frame_count = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return DB::CreateAnimation(
      _fbb,
      name__,
      frame_start,
      frame_count);
}

struct Spritesheet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SpritesheetBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.Spritesheet";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TEXTURE_PATH = 6,
    VT_CELL_COUNT = 8,
    VT_CELL_WIDTH = 10,
    VT_CELL_HEIGHT = 12,
    VT_ANIMATIONS = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Spritesheet *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  const flatbuffers::String *texture_path() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXTURE_PATH);
  }
  int32_t cell_count() const {
    return GetField<int32_t>(VT_CELL_COUNT, 0);
  }
  int32_t cell_width() const {
    return GetField<int32_t>(VT_CELL_WIDTH, 0);
  }
  int32_t cell_height() const {
    return GetField<int32_t>(VT_CELL_HEIGHT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DB::Animation>> *animations() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DB::Animation>> *>(VT_ANIMATIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TEXTURE_PATH) &&
           verifier.VerifyString(texture_path()) &&
           VerifyField<int32_t>(verifier, VT_CELL_COUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_CELL_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_CELL_HEIGHT, 4) &&
           VerifyOffset(verifier, VT_ANIMATIONS) &&
           verifier.VerifyVector(animations()) &&
           verifier.VerifyVectorOfTables(animations()) &&
           verifier.EndTable();
  }
};

struct SpritesheetBuilder {
  typedef Spritesheet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Spritesheet::VT_NAME, name);
  }
  void add_texture_path(flatbuffers::Offset<flatbuffers::String> texture_path) {
    fbb_.AddOffset(Spritesheet::VT_TEXTURE_PATH, texture_path);
  }
  void add_cell_count(int32_t cell_count) {
    fbb_.AddElement<int32_t>(Spritesheet::VT_CELL_COUNT, cell_count, 0);
  }
  void add_cell_width(int32_t cell_width) {
    fbb_.AddElement<int32_t>(Spritesheet::VT_CELL_WIDTH, cell_width, 0);
  }
  void add_cell_height(int32_t cell_height) {
    fbb_.AddElement<int32_t>(Spritesheet::VT_CELL_HEIGHT, cell_height, 0);
  }
  void add_animations(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::Animation>>> animations) {
    fbb_.AddOffset(Spritesheet::VT_ANIMATIONS, animations);
  }
  explicit SpritesheetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Spritesheet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Spritesheet>(end);
    fbb_.Required(o, Spritesheet::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Spritesheet> CreateSpritesheet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> texture_path = 0,
    int32_t cell_count = 0,
    int32_t cell_width = 0,
    int32_t cell_height = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::Animation>>> animations = 0) {
  SpritesheetBuilder builder_(_fbb);
  builder_.add_animations(animations);
  builder_.add_cell_height(cell_height);
  builder_.add_cell_width(cell_width);
  builder_.add_cell_count(cell_count);
  builder_.add_texture_path(texture_path);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Spritesheet> CreateSpritesheetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *texture_path = nullptr,
    int32_t cell_count = 0,
    int32_t cell_width = 0,
    int32_t cell_height = 0,
    std::vector<flatbuffers::Offset<DB::Animation>> *animations = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto texture_path__ = texture_path ? _fbb.CreateString(texture_path) : 0;
  auto animations__ = animations ? _fbb.CreateVectorOfSortedTables<DB::Animation>(animations) : 0;
  return DB::CreateSpritesheet(
      _fbb,
      name__,
      texture_path__,
      cell_count,
      cell_width,
      cell_height,
      animations__);
}

struct ResourceDB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResourceDBBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DB.ResourceDB";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SPRITESHEETS = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const ResourceDB *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DB::Spritesheet>> *spritesheets() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DB::Spritesheet>> *>(VT_SPRITESHEETS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SPRITESHEETS) &&
           verifier.VerifyVector(spritesheets()) &&
           verifier.VerifyVectorOfTables(spritesheets()) &&
           verifier.EndTable();
  }
};

struct ResourceDBBuilder {
  typedef ResourceDB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ResourceDB::VT_NAME, name);
  }
  void add_spritesheets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::Spritesheet>>> spritesheets) {
    fbb_.AddOffset(ResourceDB::VT_SPRITESHEETS, spritesheets);
  }
  explicit ResourceDBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ResourceDB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResourceDB>(end);
    fbb_.Required(o, ResourceDB::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<ResourceDB> CreateResourceDB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DB::Spritesheet>>> spritesheets = 0) {
  ResourceDBBuilder builder_(_fbb);
  builder_.add_spritesheets(spritesheets);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResourceDB> CreateResourceDBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    std::vector<flatbuffers::Offset<DB::Spritesheet>> *spritesheets = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto spritesheets__ = spritesheets ? _fbb.CreateVectorOfSortedTables<DB::Spritesheet>(spritesheets) : 0;
  return DB::CreateResourceDB(
      _fbb,
      name__,
      spritesheets__);
}

inline const DB::ResourceDB *GetResourceDB(const void *buf) {
  return flatbuffers::GetRoot<DB::ResourceDB>(buf);
}

inline const DB::ResourceDB *GetSizePrefixedResourceDB(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<DB::ResourceDB>(buf);
}

inline const char *ResourceDBIdentifier() {
  return "15dy";
}

inline bool ResourceDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ResourceDBIdentifier());
}

inline bool SizePrefixedResourceDBBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ResourceDBIdentifier(), true);
}

inline bool VerifyResourceDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DB::ResourceDB>(ResourceDBIdentifier());
}

inline bool VerifySizePrefixedResourceDBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DB::ResourceDB>(ResourceDBIdentifier());
}

inline const char *ResourceDBExtension() {
  return "fbb";
}

inline void FinishResourceDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DB::ResourceDB> root) {
  fbb.Finish(root, ResourceDBIdentifier());
}

inline void FinishSizePrefixedResourceDBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<DB::ResourceDB> root) {
  fbb.FinishSizePrefixed(root, ResourceDBIdentifier());
}

}  // namespace DB

#endif  // FLATBUFFERS_GENERATED_RESOURCEDB_DB_H_
