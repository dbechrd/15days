#pragma once
#include "basic.h"
#include <vector>

enum MsgType {
    // messages generated by combat system
    MsgType_Combat_Attack_Start,
    MsgType_Combat_Defend_Start,

    // messages generated by input system
    MsgType_Input_Quit,
    MsgType_Input_WalkUp,
    MsgType_Input_WalkLeft,
    MsgType_Input_WalkDown,
    MsgType_Input_WalkRight,
    MsgType_Input_RunUp,
    MsgType_Input_RunLeft,
    MsgType_Input_RunDown,
    MsgType_Input_RunRight,
    MsgType_Input_Jump,
    MsgType_Input_Primary,
    MsgType_Input_Secondary,
    MsgType_Input_Secondary_Press,

    // messages generated by movement system
    MsgType_Movement_Impulse,

    // messages generated by physics system
    MsgType_Physics_Collide,
    MsgType_Physics_Position_Change,  // TODO: Use this to update overhead text

    // messages generated by trigger system
    MsgType_Sound_Play,
    MsgType_Text_Change,

    MsgType_Window_Quit,
};

struct Msg_Combat_Attack_Start {
    int weapon {};  // or whatever
};

struct Msg_Combat_Defend_Start {
    int shield {};  // or whatever
};

struct Msg_Movement_Impulse {
    vec2 v {};  // impulse vector (dir + mag)
};

struct Msg_Physics_Collide {
    UID other {};
    // TODO: manifold? (i.e. depth, normal)
};

struct Msg_Trigger_Sound_Play {
    bool override {};
};

struct Depot;
struct Msg_Trigger_Text_Change;
typedef void (*TextChangeCallback)(Depot &depot, UID subject, Msg_Trigger_Text_Change *data);
struct Msg_Trigger_Text_Change {
    const char         *str      {};
    vec2                offset   {};
    vec4                color    {};
    TextChangeCallback  callback {};
};

struct Message {
    UID     uid  {};  // primary subject of interest
    MsgType type {};
    union {
        Msg_Combat_Attack_Start combat_attack_start;
        Msg_Combat_Defend_Start combat_defend_start;
        Msg_Movement_Impulse movement_impulse;
        Msg_Physics_Collide physics_collide;
        Msg_Trigger_Sound_Play trigger_sound_play;
        Msg_Trigger_Text_Change trigger_text_change;
    } data {};

    Message(void) {
        memset(&data, 0, sizeof(data));
    }
};

typedef std::vector<Message> MsgQueue;
