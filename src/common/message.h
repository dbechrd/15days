#pragma once
#include "basic.h"
#include <vector>

enum MsgType {
    // messages generated by combat system
    MsgType_Combat_Attack_Start,
    MsgType_Combat_Defend_Start,

    // messages generated by input system
    MsgType_Input_Quit,
    MsgType_Input_Up,
    MsgType_Input_Left,
    MsgType_Input_Down,
    MsgType_Input_Right,
    MsgType_Input_Primary,
    MsgType_Input_Secondary,

    // messages generated by movement system
    MsgType_Movement_Impulse,

    // messages generated by physics system
    MsgType_Physics_Collide,

    // messages generated by trigger system
    MsgType_Trigger_Text_Change,

    MsgType_Window_Quit,
};

struct Msg_Combat_Attack_Start {
    int weapon {};  // or whatever
};

struct Msg_Combat_Defend_Start {
    int shield {};  // or whatever
};

struct Msg_Movement_Impulse {
    vec2 v {};  // impulse vector (dir + mag)
};

struct Msg_Physics_Collide {
    UID other {};
    // TODO: manifold? (i.e. depth, normal)
};

struct Msg_Trigger_Text_Change {
    const char *text  {};
    vec4        color {};
};

struct Message {
    UID     uid  {};  // primary subject of interest
    MsgType type {};
    union {
        Msg_Combat_Attack_Start combat_attack_start;
        Msg_Combat_Defend_Start combat_defend_start;
        Msg_Movement_Impulse movement_impulse;
        Msg_Physics_Collide physics_collide;
        Msg_Trigger_Text_Change trigger_text_change;
    } data {};

    Message(void) {
        memset(&data, 0, sizeof(data));
    }
};

typedef std::vector<Message> MsgQueue;
